name: 🧪 Integration

on: 
  pull_request:
    branches: 
      - main
      - development
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

jobs:
  integration: 
    runs-on: ubuntu-22.04

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v3

      - name: 🛫 Golang setup
        uses: actions/setup-go@v3
        with:
          go-version: "1.19.x"

      - name: 💅 Check formatting
        run: if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then exit 1; fi
      
      - name: 📦 Build binary
        run: |
          cd api
          go build -o loomies

      - name: 🛫 Setup environment
        run: |
          cd api
          docker-compose up -d
          echo "MONGO_USER = root" >> .env
          echo "MONGO_PASSWORD = development" >> .env
          echo "MONGO_HOSTS = 127.0.0.1:27017" >> .env
          echo "MONGO_DATABASE = loomies" >> .env
          echo "REFRESH_TOKEN_SECRET = dummy_refresh_secret" >> .env
          echo "ACCESS_TOKEN_SECRET = dummy_access_secret" >> .env
          echo "WS_TOKEN_SECRET" = dummy_ws_secret >> .env
          echo "GAME_ZONE_RADIUS" = 0.0035 >> .env
          echo "GAME_MIN_LOOMIES_GENERATION_TIMEOUT" = 5 >> .env
          echo "GAME_MAX_LOOMIES_GENERATION_TIMEOUT" = 12 >> .env
          echo "GAME_MIN_LOOMIES_GENERATION_AMOUNT" = 2 >> .env
          echo "GAME_MAX_LOOMIES_GENERATION_AMOUNT" = 12 >> .env
          echo "GAME_LOOMIES_GENERATION_RADIUS" = 0.00175 >> .env
          echo "GAME_MAX_LOOMIES_PER_ZONE" = 12 >> .env
          echo "EMAIL_MAIL" = ${{ secrets.EMAIL_MAIL }} >> .env
          echo "EMAIL_PASSWORD" = ${{ secrets.EMAIL_PASSWORD }} >> .env

      - name: 💾 Insert data
        run: |
          cd algorithms/database
          echo "MONGO_URI = mongodb://root:development@127.0.0.1:27017" >> .env
          npm install
          npm run bulk 
          npm run update:rewards
      
      - name: ☂️ Generate the coverage report
        run: |
          cd api
          cp .env controllers/.env
          go test -coverprofile=coverage.out ./...
      
      - name: 📊 Upload the coverage report
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./api/coverage.out
          flags: ci,unittest,integration,e2e
          fail_ci_if_error: true